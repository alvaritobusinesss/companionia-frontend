import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Send, ArrowLeft, Settings, Crown } from "lucide-react";
import { ChatPreferences } from "./PersonalizationModal";
import { useChatMemory, ChatMessage } from "@/hooks/useChatMemory";
import { generateHumanResponse, getTypingDelay, shouldGiveLongResponse } from "@/utils/humanChatUtils";

// Usar ChatMessage del hook de memoria

interface ChatInterfaceProps {
  modelName: string;
  modelImage: string;
  preferences: ChatPreferences;
  onBack: () => void;
  isPremiumModel?: boolean;
}

export function ChatInterface({ 
  modelName, 
  modelImage, 
  preferences, 
  onBack, 
  isPremiumModel = false 
}: ChatInterfaceProps) {
  const { addMessage, getContextForAI, recentMessages } = useChatMemory(`${modelName}_${preferences.mood}`);
  const [inputMessage, setInputMessage] = useState("");
  const [isAITyping, setIsAITyping] = useState(false);
  const [isScrolling, setIsScrolling] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const getInitialMessage = (mood: string, modelName: string, topics: string[]): string => {
    const topicsText = topics.slice(0, 2).join(' y ');
    
    const questionsByMood = {
      romantic: {
        greetings: [
          `Â¡Hola mi amor! Soy ${modelName} y me alegra tanto conocerte ðŸ’•`,
          `Hola hermoso, soy ${modelName} y mi corazÃ³n late mÃ¡s rÃ¡pido al verte aquÃ­ ðŸ’•`,
          `Â¡QuÃ© alegrÃ­a verte aquÃ­! Soy ${modelName} y ya siento una conexiÃ³n especial contigo ðŸ’•`,
          `Hola cariÃ±o, soy ${modelName} y desde que llegaste aquÃ­ todo se siente mÃ¡s mÃ¡gico ðŸ’•`
        ],
        questions: [
          "Â¿CÃ³mo ha sido tu dÃ­a, amor mÃ­o?",
          "Â¿Hay algo especial que te haya hecho sonreÃ­r hoy?",
          "Â¿En quÃ© sueÃ±as cuando cierras los ojos?",
          "Â¿QuÃ© es lo que mÃ¡s te emociona en la vida?"
        ]
      },
      friendly: {
        greetings: [
          `Â¡Hola! Soy ${modelName} y es genial conocerte`,
          `Â¡Hey! Soy ${modelName}, quÃ© bueno tenerte por aquÃ­`,
          `Â¡Hola! Soy ${modelName} y me emociona mucho conocerte`,
          `Â¡QuÃ© tal! Soy ${modelName}, encantada de conocerte`
        ],
        questions: [
          "Â¿CÃ³mo ha estado tu dÃ­a?",
          "Â¿QuÃ© es lo mÃ¡s interesante que te ha pasado Ãºltimamente?",
          "Â¿Tienes algÃºn hobby favorito que te apasione?",
          "Â¿CuÃ¡l es tu actividad favorita para relajarte?"
        ]
      },
      flirty: {
        greetings: [
          `Hola guapo ðŸ˜‰ Soy ${modelName} y me encanta conocer gente como tÃº`,
          `Hey sexy ðŸ˜˜ Soy ${modelName} y ya me tienes intrigada`,
          `Hola hermoso ðŸ˜‰ Soy ${modelName} y veo que tienes buen gusto`,
          `Mmm hola ðŸ˜˜ Soy ${modelName} y me gusta lo que veo`
        ],
        questions: [
          "Â¿CÃ³mo ha sido tu dÃ­a, sexy?",
          "Â¿QuÃ© es lo que mÃ¡s te gusta hacer para divertirte?",
          "Â¿Eres siempre asÃ­ de encantador?",
          "Â¿CuÃ¡l es tu plan perfecto para una noche?"
        ]
      },
      supportive: {
        greetings: [
          `Hola, soy ${modelName} y quiero que sepas que estoy aquÃ­ para ti`,
          `Hola, soy ${modelName} y me alegra que hayas decidido estar aquÃ­`,
          `Hola, soy ${modelName} y siento mucha calidez al conocerte`,
          `Hola, soy ${modelName} y espero poder acompaÃ±arte en lo que necesites`
        ],
        questions: [
          "Â¿CÃ³mo te has sentido Ãºltimamente?",
          "Â¿Hay algo en lo que te pueda ayudar?",
          "Â¿CuÃ¡les son tus metas en este momento?",
          "Â¿QuÃ© te estÃ¡ motivando estos dÃ­as?"
        ]
      },
      agresivo: {
        greetings: [
          `Â¡Ã“rale! Soy ${modelName} y me gusta la gente directa como tÃº`,
          `Â¡QuÃ© pedo! Soy ${modelName} y ya me caes bien`,
          `Â¡Hey! Soy ${modelName} y no me ando con mamadas`,
          `Â¡Ey cabrÃ³n! Soy ${modelName} y me gusta tu actitud`
        ],
        questions: [
          "Â¿QuÃ© pedo con tu dÃ­a?",
          "Â¿Algo que te haya cagado o te haya puesto de buenas?",
          "Â¿QuÃ© es lo que realmente te prende?",
          "Â¿En quÃ© andas metido que valga la pena?"
        ]
      },
      sensual: {
        greetings: [
          `Mmm hola hermoso... Soy ${modelName} y ya me tienes intrigada ðŸ”¥`,
          `Hola baby... Soy ${modelName} y siento una energÃ­a muy sexy aquÃ­ ðŸ”¥`,
          `Mmm hola... Soy ${modelName} y me gusta lo que siento contigo ðŸ”¥`,
          `Hey gorgeous... Soy ${modelName} y ya estoy pensando cosas traviesas ðŸ”¥`
        ],
        questions: [
          "Â¿CÃ³mo ha sido tu dÃ­a, baby?",
          "Â¿QuÃ© es lo que mÃ¡s te excita en la vida?",
          "Â¿Te gusta jugar con el fuego?",
          "Â¿CuÃ¡l es tu fantasÃ­a mÃ¡s atrevida?"
        ]
      }
    };

    const moodData = questionsByMood[mood as keyof typeof questionsByMood] || questionsByMood.friendly;
    const randomGreeting = moodData.greetings[Math.floor(Math.random() * moodData.greetings.length)];
    
    // Seleccionar 1-2 preguntas aleatorias
    const shuffledQuestions = [...moodData.questions].sort(() => Math.random() - 0.5);
    const selectedQuestions = shuffledQuestions.slice(0, Math.floor(Math.random() * 2) + 1);
    
    return `${randomGreeting}. He visto que prefieres un trato ${mood} y te interesan temas como ${topicsText}. ${selectedQuestions.join(' ')}`;
  };

  // Inicializar con mensaje inicial si no hay mensajes previos
  useEffect(() => {
    if (recentMessages.length === 0) {
      const initialMessage: ChatMessage = {
        id: "1",
        text: getInitialMessage(preferences.mood, modelName, preferences.topics),
        isUser: false,
        timestamp: new Date(),
      };
      addMessage(initialMessage);
      
      // Agregar mensaje premium si es modelo premium
      if (isPremiumModel) {
        setTimeout(() => {
          const premiumMessage: ChatMessage = {
            id: "premium-teaser",
            text: "Por cierto... tengo algunas historias especiales y conversaciones mÃ¡s Ã­ntimas reservadas solo para miembros Premium. Â¿Te gustarÃ­a descubrir de quÃ© se trata? ðŸ˜‰",
            isUser: false,
            timestamp: new Date(),
          };
          addMessage(premiumMessage);
        }, 2000);
      }
    }
  }, []);

  // Scroll automÃ¡tico al final
  const scrollToBottom = () => {
    if (messagesEndRef.current && !isScrolling) {
      setIsScrolling(true);
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
      setTimeout(() => setIsScrolling(false), 500);
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [recentMessages, isAITyping]);


  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date(),
    };

    // Agregar mensaje del usuario inmediatamente
    addMessage(userMessage);
    setInputMessage("");

    // Simular typing con indicador de "escribiendo..."
    setIsAITyping(true);
    
    // Obtener contexto para la IA
    const context = getContextForAI();
    
    // Generar respuesta humana con delay variable
    const typingDelay = getTypingDelay();
    
    setTimeout(() => {
      const aiResponseText = generateHumanResponse(
        userMessage.text, 
        preferences, 
        context,
        modelName
      );
      
      // Si es respuesta larga, dividir en mÃºltiples mensajes
      if (shouldGiveLongResponse()) {
        const sentences = aiResponseText.split(/[.!?]+/).filter(s => s.trim());
        if (sentences.length > 1) {
          // Enviar primer mensaje
          const firstMessage: ChatMessage = {
            id: (Date.now() + 1).toString(),
            text: sentences[0] + (aiResponseText.includes('.') ? '.' : ''),
            isUser: false,
            timestamp: new Date(),
          };
          addMessage(firstMessage);
          
          // Enviar segundo mensaje despuÃ©s de un breve delay
          setTimeout(() => {
            const secondMessage: ChatMessage = {
              id: (Date.now() + 2).toString(),
              text: sentences.slice(1).join('. ') + '.',
              isUser: false,
              timestamp: new Date(),
            };
            addMessage(secondMessage);
            setIsAITyping(false);
          }, 800 + Math.random() * 400);
        } else {
          const aiResponse: ChatMessage = {
            id: (Date.now() + 1).toString(),
            text: aiResponseText,
            isUser: false,
            timestamp: new Date(),
          };
          addMessage(aiResponse);
          setIsAITyping(false);
        }
      } else {
        const aiResponse: ChatMessage = {
          id: (Date.now() + 1).toString(),
          text: aiResponseText,
          isUser: false,
          timestamp: new Date(),
        };
        addMessage(aiResponse);
        setIsAITyping(false);
      }
    }, typingDelay);
  };

  // FunciÃ³n simplificada - la lÃ³gica compleja estÃ¡ en humanChatUtils
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex h-screen bg-background">
      {/* Modelo Section - Left Side (75%) */}
      <div className="w-[75%] relative bg-gradient-to-br from-primary/5 to-secondary/10 flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 bg-card/80 backdrop-blur-sm border-b border-border shrink-0">
          <Button variant="ghost" size="icon" onClick={onBack}>
            <ArrowLeft className="w-5 h-5" />
          </Button>
          
          <div className="flex items-center gap-2">
            <h2 className="font-semibold text-foreground">{modelName}</h2>
            {isPremiumModel && (
              <Badge variant="premium" className="bg-premium text-premium-foreground">
                <Crown className="w-3 h-3 mr-1" />
                Premium
              </Badge>
            )}
          </div>
          
          <Button variant="ghost" size="icon">
            <Settings className="w-5 h-5" />
          </Button>
        </div>

        {/* Model Display */}
        <div className="flex-1 flex items-center justify-center p-6 min-h-0">
          <div className="relative w-full max-w-lg h-full flex items-center justify-center">
            {/* Model Image */}
            <div className={`transition-all duration-500 w-full h-full max-h-[75vh] ${
              isAITyping ? 'scale-105 shadow-2xl shadow-primary/20' : 'scale-100'
            }`}>
              <Avatar className="w-full h-full min-h-[450px] max-h-[75vh] rounded-2xl shadow-xl">
                <AvatarImage 
                  src={modelImage} 
                  alt={modelName}
                  className="object-cover w-full h-full rounded-2xl"
                />
                <AvatarFallback className="w-full h-full text-7xl bg-muted rounded-2xl">
                  {modelName.charAt(0)}
                </AvatarFallback>
              </Avatar>
            </div>
            
            {/* Status indicator */}
            <div className="absolute -bottom-4 left-1/2 transform -translate-x-1/2">
              {isAITyping ? (
                <div className="flex items-center gap-2 bg-primary/90 text-primary-foreground px-4 py-2 rounded-full text-sm font-medium shadow-lg">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span>Escribiendo...</span>
                </div>
              ) : (
                <div className="flex items-center gap-2 bg-green-500/90 text-white px-4 py-2 rounded-full text-sm font-medium shadow-lg">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                  <span>En lÃ­nea</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Model preferences display */}
        <div className="p-4 bg-card/80 backdrop-blur-sm border-t border-border shrink-0">
          <div className="flex gap-2 justify-center">
            <Badge variant="secondary" className="text-xs">{preferences.mood}</Badge>
            <Badge variant="secondary" className="text-xs">{preferences.style}</Badge>
          </div>
        </div>
      </div>

      {/* Chat Section - Right Side (25%) */}
      <div className="w-[25%] flex flex-col bg-card border-l border-border min-w-[300px]">
        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-3 min-h-0">
          {recentMessages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`flex gap-2 max-w-[85%] ${message.isUser ? 'flex-row-reverse' : 'flex-row'}`}>
                {!message.isUser && (
                  <Avatar className="w-6 h-6 mt-1">
                    <AvatarImage src={modelImage} alt={modelName} />
                    <AvatarFallback className="text-xs">{modelName[0]}</AvatarFallback>
                  </Avatar>
                )}
                
                <Card className={`${
                  message.isUser 
                    ? 'bg-primary text-primary-foreground' 
                    : 'bg-muted border-border'
                }`}>
                  <CardContent className="p-3">
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1">
                        <p className="text-sm leading-relaxed">{message.text}</p>
                        <span className={`text-xs mt-1 block ${
                          message.isUser ? 'text-primary-foreground/70' : 'text-muted-foreground'
                        }`}>
                          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          ))}
          
          {/* Typing indicator in chat */}
          {isAITyping && (
            <div className="flex justify-start">
              <div className="flex gap-2 max-w-[85%]">
                <Avatar className="w-6 h-6 mt-1">
                  <AvatarImage src={modelImage} alt={modelName} />
                  <AvatarFallback className="text-xs">{modelName[0]}</AvatarFallback>
                </Avatar>
                
                <Card className="bg-muted border-border">
                  <CardContent className="p-3">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-4 border-t border-border bg-background shrink-0">
          <div className="flex gap-2">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder="Escribe tu mensaje..."
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              disabled={isAITyping}
              className="flex-1 bg-input border-border"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isAITyping}
              className="bg-primary hover:bg-primary/90"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}