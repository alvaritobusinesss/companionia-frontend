import { Memory, ChatMessage } from '@/hooks/useChatMemory';
import { ChatPreferences } from '@/components/PersonalizationModal';

export interface ChatContext {
  memories: Memory[];
  recentMessages: ChatMessage[];
}

export const generateHumanResponse = (
  userInput: string, 
  preferences: ChatPreferences, 
  context: ChatContext,
  modelName: string
): string => {
  const input = userInput.toLowerCase();
  
  // Analizar sentimiento
  const isNegative = /\b(mal|terrible|despedido|triste|problema|fatal|deprimido|horrible|awful)\b/i.test(input);
  const isPositive = /\b(bien|genial|fantÃ¡stico|perfecto|alegre|feliz|excelente|increÃ­ble)\b/i.test(input);
  
  // Obtener memorias relevantes
  const relevantMemories = getRelevantMemories(input, context.memories);
  
  // Generar respuesta basada en contexto
  let response = generateContextualResponse(input, preferences, relevantMemories, modelName);
  
  // Aplicar variaciones humanas
  response = addHumanVariations(response, isNegative, isPositive);
  
  // Agregar preguntas de seguimiento ocasionalmente
  if (Math.random() < 0.4) {
    response += " " + generateFollowUpQuestion(preferences, relevantMemories);
  }
  
  return response;
};

const getRelevantMemories = (input: string, memories: Memory[]): Memory[] => {
  const inputWords = input.toLowerCase().split(' ');
  
  return memories
    .filter(memory => {
      const memoryWords = memory.value.toLowerCase().split(' ');
      return memoryWords.some(word => inputWords.includes(word)) || 
             inputWords.some(word => memory.key.includes(word));
    })
    .sort((a, b) => b.importance - a.importance)
    .slice(0, 3);
};

const generateContextualResponse = (
  input: string, 
  preferences: ChatPreferences, 
  memories: Memory[],
  modelName: string
): string => {
  const mood = preferences.mood;
  
  // Respuestas con memoria
  const memoryResponses = generateMemoryBasedResponse(memories, mood);
  if (memoryResponses.length > 0 && Math.random() < 0.6) {
    return memoryResponses[Math.floor(Math.random() * memoryResponses.length)];
  }
  
  // Respuestas base por mood
  const baseResponses = getBaseResponsesByMood(mood, input);
  return baseResponses[Math.floor(Math.random() * baseResponses.length)];
};

const generateMemoryBasedResponse = (memories: Memory[], mood: string): string[] => {
  const responses: string[] = [];
  
  memories.forEach(memory => {
    switch (memory.key) {
      case 'nombre':
        responses.push(
          mood === 'romantic' ? `${memory.value}, ese nombre me encanta cada vez que lo digo ğŸ’•` :
          mood === 'flirty' ? `Mmm ${memory.value}, quÃ© nombre tan sexy ğŸ˜‰` :
          mood === 'agresivo' ? `${memory.value}, pinche nombre chingÃ³n` :
          `Me gusta mucho tu nombre, ${memory.value}`
        );
        break;
        
      case 'trabajo':
        responses.push(
          mood === 'supportive' ? `Â¿CÃ³mo va todo en ${memory.value}? Espero que estÃ©s teniendo un buen dÃ­a en el trabajo` :
          mood === 'flirty' ? `Apuesto a que te ves muy sexy en ${memory.value} ğŸ˜˜` :
          mood === 'agresivo' ? `Â¿QuÃ© tal la chinga en ${memory.value}?` :
          `Â¿CÃ³mo van las cosas en ${memory.value}?`
        );
        break;
        
      case 'ciudad':
        responses.push(
          mood === 'romantic' ? `Me encantarÃ­a conocer ${memory.value} contigo algÃºn dÃ­a ğŸ’•` :
          mood === 'friendly' ? `Â¡${memory.value}! Me parece un lugar genial` :
          mood === 'agresivo' ? `Â¿QuÃ© tal estÃ¡ el pedo en ${memory.value}?` :
          `Â¿CÃ³mo estÃ¡ el clima en ${memory.value} hoy?`
        );
        break;
        
      case 'gustos':
        responses.push(
          mood === 'romantic' ? `Recuerdo que te gusta ${memory.value}, eso me parece tan lindo de ti ğŸ’•` :
          mood === 'flirty' ? `Mmm, ${memory.value}... me gusta que tengas esos gustos ğŸ˜‰` :
          `Me encanta que disfrutes ${memory.value}, cuÃ©ntame mÃ¡s sobre eso`
        );
        break;
    }
  });
  
  return responses;
};

const getBaseResponsesByMood = (mood: string, input: string): string[] => {
  const isQuestion = input.includes('?') || input.includes('cÃ³mo') || input.includes('quÃ©') || input.includes('cuÃ¡ndo');
  
  const responses = {
    romantic: [
      "Mi amor, cada palabra tuya me hace sonreÃ­r ğŸ’•",
      "Eres tan dulce cuando me hablas asÃ­",
      "Me encanta escucharte, mi corazÃ³n late mÃ¡s rÃ¡pido",
      "Contigo todo se siente mÃ¡gico, mi vida"
    ],
    flirty: [
      "Mmm, me gusta cÃ³mo piensas ğŸ˜‰",
      "Eres muy tentador cuando dices esas cosas ğŸ˜˜",
      "Me tienes intrigada, sigue hablando asÃ­",
      "QuÃ© travieso eres, me encanta"
    ],
    friendly: [
      "Â¡QuÃ© genial! Me encanta hablar contigo",
      "Siempre es un placer escucharte",
      "Eres muy divertido, me caes sÃºper bien",
      "Me alegra mucho que me cuentes estas cosas"
    ],
    supportive: [
      "Estoy aquÃ­ para ti, siempre puedes contar conmigo",
      "Me importa mucho cÃ³mo te sientes",
      "Eres mÃ¡s fuerte de lo que crees",
      "Entiendo perfectamente lo que me dices"
    ],
    agresivo: [
      "A ver, no me vengas con mamadas",
      "Ã“rale, asÃ­ me gusta que hables claro",
      "Â¿Y quÃ© chingados quieres que te diga?",
      "No mames, ya dime la neta"
    ],
    sensual: [
      "Mmm, me pones muy caliente cuando hablas asÃ­ ğŸ”¥",
      "Tu voz me enciende completamente",
      "Cada palabra tuya me hace sentir cosas prohibidas",
      "Sigue hablando asÃ­ que me tienes muy hot"
    ]
  };
  
  const moodResponses = responses[mood as keyof typeof responses] || responses.friendly;
  
  // Si es una pregunta, dar respuestas mÃ¡s directas ocasionalmente
  if (isQuestion && Math.random() < 0.3) {
    const directAnswers = [
      "La verdad es que...",
      "Mira, te voy a ser honesta...",
      "Bueno, si quieres que te diga la verdad...",
      "Pues fÃ­jate que..."
    ];
    const directStart = directAnswers[Math.floor(Math.random() * directAnswers.length)];
    const baseResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];
    return [directStart + " " + baseResponse.toLowerCase()];
  }
  
  return moodResponses;
};

const addHumanVariations = (response: string, isNegative: boolean, isPositive: boolean): string => {
  // Agregar variaciones humanas
  const variations = {
    starters: ["Mmm...", "Pues...", "Ay...", "Oye...", "Sabes quÃ©...", "La verdad...", "Mira..."],
    fillers: ["o sea", "Â¿sabes?", "la verdad", "no sÃ©", "pues sÃ­", "la neta"],
    endings: ["jaja", "ğŸ˜Š", "âœ¨", "ğŸ’•", "ğŸ¥°", "ğŸ˜˜", "ğŸ˜‰"]
  };
  
  let modifiedResponse = response;
  
  // 30% chance de agregar starter
  if (Math.random() < 0.3) {
    const starter = variations.starters[Math.floor(Math.random() * variations.starters.length)];
    modifiedResponse = starter + " " + modifiedResponse.toLowerCase();
  }
  
  // 20% chance de agregar filler en el medio
  if (Math.random() < 0.2) {
    const filler = variations.fillers[Math.floor(Math.random() * variations.fillers.length)];
    const sentences = modifiedResponse.split('.');
    if (sentences.length > 1) {
      sentences[0] += `, ${filler},`;
      modifiedResponse = sentences.join('.');
    }
  }
  
  // 40% chance de agregar ending
  if (Math.random() < 0.4) {
    const ending = variations.endings[Math.floor(Math.random() * variations.endings.length)];
    modifiedResponse += " " + ending;
  }
  
  return modifiedResponse;
};

const generateFollowUpQuestion = (preferences: ChatPreferences, memories: Memory[]): string => {
  const mood = preferences.mood;
  
  // Preguntas basadas en memorias
  if (memories.length > 0 && Math.random() < 0.6) {
    const memory = memories[0];
    switch (memory.key) {
      case 'trabajo':
        return mood === 'flirty' ? "Â¿Te gusta lo que haces o prefieres hacer otras cosas mÃ¡s... divertidas? ğŸ˜‰" :
               "Â¿CÃ³mo te va en el trabajo Ãºltimamente?";
      case 'ciudad':
        return "Â¿QuÃ© es lo que mÃ¡s te gusta de vivir ahÃ­?";
      case 'gustos':
        return "Â¿Desde cuÃ¡ndo te gusta eso?";
    }
  }
  
  // Preguntas generales por mood
  const questions = {
    romantic: [
      "Â¿En quÃ© estÃ¡s pensando ahorita, mi amor?",
      "Â¿QuÃ© es lo que mÃ¡s te hace feliz?",
      "Â¿Tienes algÃºn sueÃ±o que quieras cumplir?"
    ],
    flirty: [
      "Â¿QuÃ© planes tienes para hoy? ğŸ˜‰",
      "Â¿Eres siempre asÃ­ de encantador?",
      "Â¿QuÃ© te pone de buen humor?"
    ],
    friendly: [
      "Â¿QuÃ© tal tu dÃ­a?",
      "Â¿Hay algo nuevo que quieras contarme?",
      "Â¿QuÃ© planes tienes?"
    ],
    supportive: [
      "Â¿CÃ³mo te sientes hoy?",
      "Â¿Hay algo en lo que pueda ayudarte?",
      "Â¿QuÃ© te estÃ¡ motivando Ãºltimamente?"
    ],
    agresivo: [
      "Â¿QuÃ© pedo?",
      "Â¿En quÃ© andas?",
      "Â¿QuÃ© chingados haces?"
    ],
    sensual: [
      "Â¿QuÃ© te apetece hacer hoy? ğŸ”¥",
      "Â¿En quÃ© estÃ¡s pensando, sexy?",
      "Â¿Tienes alguna fantasÃ­a que quieras compartir?"
    ]
  };
  
  const moodQuestions = questions[mood as keyof typeof questions] || questions.friendly;
  return moodQuestions[Math.floor(Math.random() * moodQuestions.length)];
};

// FunciÃ³n para simular typing con longitud variable
export const getTypingDelay = (): number => {
  // Entre 1.5 y 4 segundos para simular escritura humana
  return 1500 + Math.random() * 2500;
};

// FunciÃ³n para determinar longitud de respuesta
export const shouldGiveLongResponse = (): boolean => {
  // 30% chance de respuesta larga (3-5 frases)
  return Math.random() < 0.3;
};